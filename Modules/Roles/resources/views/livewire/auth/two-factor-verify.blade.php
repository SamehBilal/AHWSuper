<?php

use Livewire\Attributes\Layout;
use Livewire\Volt\Component;
use Livewire\Attributes\Validate;
use Illuminate\Validation\ValidationException;
use Illuminate\Support\Facades\RateLimiter;
use Illuminate\Auth\Events\Lockout;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Str;

new #[Layout('roles::components.layouts.auth')] class extends Component {
    #[Validate('required')]
    public string $code = '';
    
    public bool $useRecoveryCode = false;

    /**
     * Handle an incoming verify request.
     */
    public function verify()
    {
        // Dynamic validation based on the type of code being used
        if ($this->useRecoveryCode) {
            $this->validate([
                'code' => 'required|string|min:8',
            ]);
        } else {
            $this->validate([
                'code' => 'required|digits:6',
            ]);
        }

        $this->ensureIsNotRateLimited();

        $user = Auth::user();

        if ($this->useRecoveryCode) {
            $this->verifyRecoveryCode($user);
        } else {
            $this->verifyAuthenticatorCode($user);
        }

        RateLimiter::clear($this->throttleKey());
        $user->two_factor_confirmed_at = now();
        $user->save();
        $this->redirectIntended(default: route('dashboard', absolute: false), navigate: true);
    }

    /**
     * Verify authenticator app code
     */
    protected function verifyAuthenticatorCode($user)
    {
        $google2fa = app('pragmarx.google2fa');

        if (!$google2fa->verifyKey($user->two_factor_secret, $this->code)) {
            RateLimiter::hit($this->throttleKey());

            throw ValidationException::withMessages([
                'code' => __('auth.failed'),
            ]);
        }
    }

    /**
     * Verify recovery code
     */
    protected function verifyRecoveryCode($user)
    {
        $recoveryCodes = json_decode($user->two_factor_recovery_codes, true) ?? [];
        
        if (!in_array($this->code, $recoveryCodes)) {
            RateLimiter::hit($this->throttleKey());

            throw ValidationException::withMessages([
                'code' => __('The recovery code is invalid.'),
            ]);
        }

        // Remove the used recovery code
        $recoveryCodes = array_diff($recoveryCodes, [$this->code]);
        $user->two_factor_recovery_codes = json_encode(array_values($recoveryCodes));
    }

    /**
     * Ensure the authentication request is not rate limited.
     */
     protected function ensureIsNotRateLimited(): void
    {
        if (RateLimiter::tooManyAttempts($this->throttleKey(), 5)) {
            event(new Lockout(request()));

            $seconds = RateLimiter::availableIn($this->throttleKey());

            throw ValidationException::withMessages([
                'code' => __('auth.throttle', [
                    'seconds' => $seconds,
                    'minutes' => ceil($seconds / 60),
                ]),
            ]);
        }
    }

    /**
     * Get the authentication rate limiting throttle key.
     */
    protected function throttleKey(): string
    {
        return Str::transliterate(Str::lower($this->code) . '|' . request()->ip());
    }

}; ?>

<div class="flex flex-col gap-6">

    <x-auth-header :title="__('Two Factor Verification')" :description="!$useRecoveryCode ? __('Using the code generated by your Authenticator App'):__('Using one of your emergency recovery codes.')" />

    <!-- Session Status -->
    <x-auth-session-status class="text-center" :status="session('status')" />


    <form wire:submit="verify" class="flex flex-col gap-6">

        @if (!$useRecoveryCode)
            <!-- Code Input -->
            <x-mary-pin :label="__('Authentication Code')" wire:model="code" size="6" hide hide-type="square" />
        @else
            <!-- Recovery Code -->
            <x-mary-input :label="__('Recovery Code')" wire:model="code" placeholder="{{ __('Recovery Code') }}" inline clearable
            required  />
        @endif

        <div class="flex items-center justify-end">
            <x-mary-button label="{{ __('Verify') }}" type="submit" wire:click="verify" class="w-full btn-primary"
                spinner />
        </div>
    </form>

    <div class="divider">or</div>

    @if (!$useRecoveryCode)
        <div x-if="!$useRecoveryCode" class="space-x-1 rtl:space-x-reverse text-center text-sm text-zinc-600 dark:text-zinc-400">
            {{ __('Use a recovery code instead?') }}
            <a class="underline cursor-pointer" wire:click="$set('useRecoveryCode', true)" >{{ __('Recovery Code') }}</a>
        </div>
    @else
        <div x-else class="space-x-1 rtl:space-x-reverse text-center text-sm text-zinc-600 dark:text-zinc-400">
            {{ __('Use an Authenticator code?') }}
            <a class="underline cursor-pointer" wire:click="$set('useRecoveryCode', false)" >{{ __('Authenticator Code') }}</a>
        </div>
    @endif

    <div class="flex items-center justify-center">
        <x-mary-button icon="o-arrow-right-start-on-rectangle" label="{{ __('Log Out') }}" class=""
                    @click.prevent="document.getElementById('logout').submit();" />
    </div>
    <form method="POST" id="logout" action="{{ route('logout') }}" class="w-full">
        @csrf
        
    </form>
</div>
